{"version":3,"sources":["axios.js","Rows.js","Request.js","Banner.js","netflix.png","profile.jpg","Nav.js","screens/Homescreen.js","firebase.js","screens/SignUpScreen.js","screens/Login.js","features/counter/userSlice.js","screens/PlanScreen.js","screens/ProfileScreen.js","App.js","app/store.js","serviceWorker.js","index.js"],"names":["instance","axios","create","baseURL","Rows","title","fetchURL","isLargeRow","useState","movies","setMovies","trailerURL","setTrailerURL","useEffect","a","get","request","data","results","fetchData","className","map","movie","onClick","movieTrailer","name","then","url","console","log","urlParams","URLSearchParams","URL","search","catch","error","handleClick","src","poster_path","backdrop_path","alt","id","videoId","opts","height","width","playerVars","autoplay","API_KEY","requests","fetchTrending","fetchNetflixOriginals","fetchTopRated","fetchActionMovies","fetchComedyMovies","fetchHorrorMovies","fetchRomanceMovies","fetchDocumentaries","Banner","str","n","setMovie","Math","floor","random","length","style","backgroundSize","backgroundImage","backgroundPosition","original_name","release_date","popularity","overview","substr","Nav","show","handleShow","history","useHistory","window","addEventListener","scrollY","cursor","push","netflix","profile","Homescreen","auth","firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","firestore","SignUpScreen","props","emailRef","useRef","passwordRef","ref","placeholder","type","e","preventDefault","signInWithEmailAndPassword","current","value","authUser","alert","message","createUserWithEmailAndPassword","Login","signIn","setSignIn","userSlice","createSlice","initialState","user","reducers","login","state","action","payload","logout","actions","selectUser","PlanScreen","ProfileScreen","useSelector","email","signOut","App","dispatch","useDispatch","onAuthStateChanged","userAuth","uid","exact","path","store","configureStore","reducer","userReducer","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.eb112372.chunk.js","sourcesContent":["import axios from \"axios\";\r\n\r\nconst instance = axios.create({\r\n    baseURL: \"https://api.themoviedb.org/3\",\r\n});\r\n\r\nexport default instance; ","import React, {useEffect, useState} from 'react';\r\nimport axios from \"./axios\";\r\nimport \"./Rows.css\";\r\nimport Youtube from \"react-youtube\";\r\nimport movieTrailer from \"movie-trailer\";\r\n\r\nconst base_url = \"https://image.tmdb.org/t/p/original/\";\r\nfunction Rows({title, fetchURL, isLargeRow}) {\r\n\r\n    const [movies, setMovies] = useState([]);\r\n    const [trailerURL, setTrailerURL] = useState(\"\");\r\n\r\n    useEffect(()=>{\r\n\r\n        async function fetchData(){\r\n            const request = await axios.get(fetchURL);\r\n            //console.log(request.data.results);\r\n            setMovies(request.data.results);\r\n            return request;\r\n        }\r\n        fetchData();\r\n\r\n    }, [fetchURL]); //Always include outside variables in this inorder to tell useEffect when to update the value\r\n\r\n    const opts = {\r\n        height: \"390\",\r\n        width: \"100%\",\r\n        playerVars: {\r\n            // https://developers.google.com/youtube/player_parameters\r\n            autoplay: 1,\r\n        },\r\n    };\r\n\r\n   \r\n    const handleClick = (movie) => {\r\n        if (trailerURL){\r\n            setTrailerURL('');\r\n        }\r\n        else { \r\n            movieTrailer(movie?.name || \"\") \r\n            .then((url)=>{\r\n                console.log(\"URLLLLLL\"+movie.name);\r\n                const urlParams = new URLSearchParams(new URL(url).search);\r\n                setTrailerURL(urlParams.get(\"v\"));\r\n            })\r\n            .catch((error) => console.log(error));\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"rows\">\r\n            <h1 className=\"rows__title\">{title}</h1>\r\n\r\n            <div className=\"rows__posters\">\r\n                {/* Movie Posters */}\r\n                {movies.map(movie => (\r\n                    <img\r\n                    key={movie.id}\r\n                    onClick = {() => handleClick(movie)}\r\n                    key={movie.id}\r\n                    className={`rows__poster ${isLargeRow && \"row__posterLarge\"}`} \r\n                    src={`${base_url}${isLargeRow ? movie.poster_path : movie.backdrop_path}`} alt={movie.name}/>\r\n                ))}\r\n            </div>\r\n            {/* {trailerURL && <Youtube videoId={trailerURL} opts={opts}/>} */}\r\n            {trailerURL && <Youtube videoId={trailerURL} opts={opts}/>}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Rows;","const API_KEY = \"2ce26ce0474c89ec79fc82817da97e04\";\r\n\r\nconst requests = {\r\n    fetchTrending: `trending/all/week?api_key=${API_KEY}&language=en-US`,\r\n    fetchNetflixOriginals: `discover/tv?api_key=${API_KEY}&with_networks=213`,\r\n    fetchTopRated: `/movie/top_rated?api_key=${API_KEY}&language=en-US`,\r\n    fetchActionMovies: `/discover/movie?api_key=${API_KEY}&with_genres=28`,\r\n    fetchComedyMovies: `/discover/movie?api_key=${API_KEY}&with_genres=35`,\r\n    fetchHorrorMovies: `/discover/movie?api_key=${API_KEY}&with_genres=27`,\r\n    fetchRomanceMovies: `/discover/movie?api_key=${API_KEY}&with_genres=10749`,\r\n    fetchDocumentaries: `/discover/movie?api_key=${API_KEY}&with_genres=99`,\r\n}\r\n\r\nexport default requests;","import React,{useState, useEffect} from 'react';\r\nimport axios from './axios';\r\nimport requests from './Request';\r\nimport \"./Banner.css\"\r\n\r\nfunction Banner() {\r\n    const[movie, setMovie] = useState([]);\r\n    useEffect(()=>{\r\n        async function fetchData(){\r\n            const request = await axios.get(requests.fetchHorrorMovies);\r\n            setMovie(request.data.results[\r\n                Math.floor(Math.random()*request.data.results.length-1)\r\n            ]\r\n            );         \r\n        return request;\r\n        }\r\n        fetchData();\r\n    },[]);\r\n\r\n    console.log(movie);\r\n\r\n    function truncate(str, n){\r\n        return str?.length>n?str.substr(0,n-1)+'...':str;\r\n    }\r\n\r\n    return (\r\n        <header className=\"banner\"\r\n            style={{backgroundSize: \"cover\",\r\n                    backgroundImage: `url(\r\n                        \"https://image.tmdb.org/t/p/original/${movie?.backdrop_path}\"\r\n                        )`,\r\n                    backgroundPosition: \"center center\",\r\n                    }}>\r\n            <div className=\"banner__content\">\r\n                <h1 className=\"banner__title\"> \r\n                    {movie?.title || movie?.name || movie?.original_name}\r\n                </h1>\r\n            <div className=\"banner__date\">\r\n                <p><span className=\"heading\">Release Date: </span>{movie.release_date}</p>\r\n            </div>\r\n            <div className=\"banner__popularity\">\r\n                <p><span className=\"heading\">Popularity: </span>{movie.popularity}</p>\r\n            </div>\r\n            <div className=\"banner__buttons\">\r\n                <button className=\"banner__button\">Play</button>\r\n                <button className=\"banner__button\">My List</button>\r\n            </div>\r\n            <h1 className=\"banner__description\">\r\n                {truncate(movie?.overview, 150)}\r\n            </h1>\r\n            \r\n            \r\n            {/* 2 buttons */}\r\n            {/* description */}\r\n            </div>\r\n            <div className=\"banner__gradient\"/>\r\n        </header>\r\n    );\r\n}\r\nexport default Banner;","export default __webpack_public_path__ + \"static/media/netflix.774e8c16.png\";","export default __webpack_public_path__ + \"static/media/profile.09ed87cb.jpg\";","import React, { useEffect, useState } from 'react';\r\nimport netflix from \"./netflix.png\";\r\nimport profile from \"./profile.jpg\";\r\nimport \"./Nav.css\";\r\nimport { useHistory } from 'react-router';\r\n\r\nfunction Nav() {\r\n    \r\n    const [show, handleShow] = useState(false);\r\n    const history = useHistory();\r\n    useEffect(()=>{\r\n        window.addEventListener(\"scroll\",()=>{\r\n            if (window.scrollY > 100){\r\n                handleShow(true);\r\n            }\r\n            else handleShow(false);\r\n        });\r\n       \r\n    },[]);\r\n    \r\n    return (\r\n        <div className={`nav ${show && \"nav__black\"}`}>\r\n            <img\r\n                style={{cursor: 'pointer'}}\r\n                onClick={()=>{history.push(\"/\")}}\r\n                className=\"nav__logo\"\r\n                src={netflix}\r\n                alt=\"Netflix logo\"\r\n            />\r\n\r\n            <img\r\n                style={{cursor: 'pointer'}}\r\n                onClick={()=>{history.push(\"/profile\")}}\r\n                className=\"nav__profile\"\r\n                src={profile}\r\n                alt=\"Profile picture\"\r\n            />\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Nav;","import './Homescreen.css';\r\nimport React from 'react';\r\nimport Rows from '../Rows'\r\nimport request from \"../Request\";\r\nimport Banner from \"../Banner\";\r\nimport Nav from \"../Nav\"; \r\nfunction Homescreen() {\r\n  return (\r\n    <div className=\"Homescreen\">\r\n\r\n     {/* Nav */}\r\n     <Nav/>\r\n     <Banner/>\r\n     <br></br>\r\n     <Rows isLargeRow title=\"NETFLIX ORIGINALS\" fetchURL={request.fetchNetflixOriginals}/>\r\n     <Rows title=\"Trending Now\" fetchURL={request.fetchTrending}/>\r\n     <Rows title=\"Top Rated\" fetchURL={request.fetchTopRated}/>\r\n     <Rows title=\"Action Movies\" fetchURL={request.fetchActionMovies}/>\r\n     <Rows title=\"Comedy Movies\" fetchURL={request.fetchComedyMovies}/>\r\n     <Rows title=\"Horror Movies\" fetchURL={request.fetchHorrorMovies}/>\r\n     <Rows title=\"Romance Movies\" fetchURL={request.fetchRomanceMovies}/>\r\n     <Rows title=\"Documentaries\" fetchURL={request.fetchDocumentaries}/>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Homescreen;\r\n","// For Firebase JS SDK v7.20.0 and later, measurementId is optional\r\n\r\nimport firebase from 'firebase';\r\n\r\nconst firebaseConfig = {\r\n  apiKey: \"AIzaSyCDZMRvB-xGJWrISA2_TX6Pum-O9C46YJY\",\r\n  authDomain: \"netflix-redux-11109.firebaseapp.com\",\r\n  projectId: \"netflix-redux-11109\",\r\n  storageBucket: \"netflix-redux-11109.appspot.com\",\r\n  messagingSenderId: \"659852919627\",\r\n  appId: \"1:659852919627:web:9fc487f8327b230c4f1ece\"\r\n};\r\n\r\nconst firebaseApp = firebase.initializeApp(firebaseConfig);\r\nconst db = firebaseApp.firestore();\r\nconst auth = firebase.auth();\r\n\r\nexport {auth};\r\nexport default db;\r\n","import React, {useRef} from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport './SignUpScreen.css';\r\nimport {auth} from \"../firebase\";\r\n\r\nfunction SignUpScreen(props) {\r\n\r\n    \r\n\r\n    const emailRef = useRef(null);\r\n    const passwordRef = useRef(null);\r\n\r\n    const register = (e)=>{\r\n        e.preventDefault();\r\n\r\n        auth.createUserWithEmailAndPassword(emailRef.current.value, passwordRef.current.value)\r\n        .then((authUser)=>{\r\n            console.log(authUser);\r\n            alert(\"User Created Successfully\");\r\n        })\r\n\r\n        .catch(error => {\r\n            alert(\"User Already Exists\");\r\n        });\r\n    };\r\n\r\n    const signIn = (e) =>{\r\n        e.preventDefault();\r\n\r\n        auth.signInWithEmailAndPassword(emailRef.current.value, passwordRef.current.value)\r\n        .then((authUser)=>{\r\n            alert(\"signed in successfully\");\r\n            console.log(authUser);\r\n        })\r\n        .catch(error=>{\r\n            alert(error.message);\r\n            alert(\"signed in failed\");\r\n\r\n        });\r\n    };\r\n\r\n    return (\r\n        <div className=\"signupscreen\">\r\n            <form>\r\n                <h1>Sign In</h1>\r\n                <input ref={emailRef} placeholder=\"Email\" type=\"email\"/>\r\n                <input ref={passwordRef} placeholder=\"Password\" type=\"password\"/>\r\n                <button type=\"submit\" onClick={signIn}>Sign In</button>\r\n\r\n                <h4>\r\n                    <span className=\"signup__grey\">New to Netflix? </span>\r\n                    <span className=\"signupScreen_link\" onClick={register}>Sign Up now.</span>\r\n                    </h4>\r\n            </form>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default SignUpScreen;","import React, {useState} from 'react';\r\nimport './Login.css'\r\nimport netflix from \"../netflix.png\";\r\nimport SignUpScreen from './SignUpScreen';\r\n\r\n\r\n\r\nfunction Login() {\r\n    const [signIn, setSignIn] = useState(false);\r\n\r\n    return (\r\n        <div className=\"login\"> \r\n        <div className=\"login__gradient\">\r\n        \r\n            <div className=\"login__background\">\r\n                <img className=\"login__logo\" src={netflix} alt=\"logo\"/>\r\n                <button onClick={()=>setSignIn(true)} className=\"login__btn\">Sign In</button>\r\n            </div>\r\n            </div>\r\n\r\n            \r\n\r\n            <div className=\"login__body\">\r\n                {signIn ? <SignUpScreen/> : \r\n                <>\r\n                <h1>Unlimited films, TV programmes and more.</h1>\r\n                <h2>Watch anytime, Cancel at any time</h2>\r\n                <h3>Ready to watch? Enter your email to create or restart your membership.</h3>\r\n                <div className=\"login__input\">\r\n                    <div className=\"input__container\">\r\n                    <form>\r\n                        <input type=\"email\"\r\n                        placeholder=\"Email Address\" />\r\n                    </form>\r\n\r\n                    <button className=\"login__getStarted\">GET STARTED</button>\r\n                    </div>\r\n                    \r\n                </div>\r\n                </>}\r\n                \r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Login;","import {createSlice} from \"@reduxjs/toolkit\";\n\nexport const userSlice = createSlice({\n\n    name: \"user\",\n    initialState: {\n        user: null,\n    },\n    reducers: {\n        login: (state, action)=>{\n            state.user = action.payload;\n        },\n        logout: (state)=>{\n            state.user = null;\n        },\n    },\n});\n\nexport const {login, logout} = userSlice.actions;\nexport const selectUser = (state)=>state.user.user;\nexport default userSlice.reducer;","import React from 'react';\r\nimport './PlanScreen.css'\r\n\r\nfunction PlanScreen() {\r\n    return (\r\n        <div className=\"planScreen\">\r\n\r\n            <div className=\"planScreen__plan\">\r\n                <div className=\"planScreen__info\">\r\n                    <h5>Premium</h5>\r\n                    <h6>4K + HDR</h6>\r\n                </div>\r\n                <button>Subscribe</button>\r\n            </div>\r\n\r\n            <div className=\"planScreen__plan\">\r\n                <div className=\"planScreen__info\">\r\n                    <h5>Premium</h5>\r\n                    <h6>4K + HDR</h6>\r\n                </div>\r\n                <button>Subscribe</button>\r\n            </div>\r\n\r\n            <div className=\"planScreen__plan\">\r\n                <div className=\"planScreen__info\">\r\n                    <h5>Premium</h5>\r\n                    <h6>4K + HDR</h6>\r\n                </div>\r\n                <button>Subscribe</button>\r\n            </div>\r\n            \r\n        </div>\r\n    );\r\n}\r\n\r\nexport default PlanScreen;","import React from 'react';\r\nimport \"./ProfileScreen.css\";\r\nimport Nav from \"../Nav\";\r\nimport profile from \"../profile.jpg\";\r\nimport { selectUser } from '../features/counter/userSlice';\r\nimport { useSelector } from 'react-redux';\r\nimport { auth } from '../firebase';\r\nimport PlanScreen from './PlanScreen';\r\n\r\nfunction ProfileScreen(props) {\r\n\r\n    const user = useSelector(selectUser);\r\n\r\n    return (\r\n        <div className=\"profileScreen\">\r\n            <Nav/>\r\n            <div className=\"profileScreen__body\">\r\n                <h1>Edit Profile</h1>\r\n                <div className=\"profileScreen__info\">\r\n                    <img src={profile}/>\r\n                    <div className=\"profileScreen__details\">\r\n                        <h2>{user.email}</h2>\r\n                        <div className=\"profileScreen__plans\">\r\n                        <h3>Plans</h3>\r\n                            <PlanScreen/>\r\n                            <button onClick={()=>auth.signOut()} className=\"profileScreen__signout\">Signout</button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ProfileScreen;","import \"./App.css\";\nimport React, { useEffect } from \"react\";\nimport Homescreen from \"./screens/Homescreen\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport Login from \"./screens/Login\";\nimport { auth } from \"./firebase\";\nimport {useDispatch, useSelector} from 'react-redux';\nimport {login, logout, selectUser} from \"./features/counter/userSlice\";\nimport ProfileScreen from \"./screens/ProfileScreen\";\n\nfunction App() {\n  const user = useSelector(selectUser);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    const unsubscribe = auth.onAuthStateChanged((userAuth) => {\n      if (userAuth) {\n        // Logged in\n        dispatch(\n          login({\n            uid: userAuth.uid,\n            email: userAuth.email,\n          })\n        );\n      } else {\n        dispatch(logout());\n        //Logged out\n      }\n    });\n\n    return unsubscribe;\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <Router>\n        {!user ? (\n          <Login />\n        ) : (\n          <Switch>\n            <Route exact path=\"/profile\">\n              <ProfileScreen/>\n            </Route>\n            <Route exact path=\"/\">\n              <Homescreen />\n            </Route>\n          </Switch>\n        )}\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","import { configureStore } from '@reduxjs/toolkit';\nimport userReducer from '../features/counter/userSlice';\n\nexport const store = configureStore({\n  reducer: {\n    user: userReducer,\n  },\n});\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport {store} from './app/store';\nimport { Provider } from 'react-redux';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}